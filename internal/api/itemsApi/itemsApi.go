/*
 * Сервис по обмену вещами Steam
 *
 * API for exchanging virtual items
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package items

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	"go-server/internal/item"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var db *gorm.DB

func init() {
	var err error
	db, err = gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	if err != nil {
		log.Fatal(err)
	}

	// Автомиграция модели данных
	db.AutoMigrate(&item.Item{})
}

/*
	Наполнить все методы (связь с БД и тд) - то есть настроить логику

Изначально захардкодить вывод json
*/
func ItemsGet(w http.ResponseWriter, r *http.Request) {
	var items []item.Item
	db.Find(&items)

	// Преобразование моделей данных в формат JSON
	jsonData, err := json.Marshal(items)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonData)
}

// 	item1 := Item{ItemId: "1", Name: "Item 1", Rarity: "Common", Description: "Item 1 description"}
// 	item2 := Item{ItemId: "2", Name: "Item 2", Rarity: "Uncommon", Description: "Item 2 description"}
// 	items := Items{Items: []Item{item1, item2}}

// 	// Сериализуем структуру в JSON
// 	jsonData, err := json.Marshal(items)
// 	if err != nil {
// 		http.Error(w, err.Error(), http.StatusInternalServerError)
// 		return
// 	}

// 	// Устанавливаю заголовки и отправляю JSON
// 	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
// 	w.WriteHeader(http.StatusOK)
// 	w.Write(jsonData)
// }

func ItemsItemIdDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)
	itemID, ok := vars["item_id"]
	if !ok {
		http.Error(w, "item_id is missing in parameters", http.StatusBadRequest)
		return
	}

	// Удаление записи из базы данных
	db.Delete(&item.Item{}, "item_id = ?", itemID)
	w.WriteHeader(http.StatusOK)
}

func ItemsItemIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	// Получение значения item_id из параметров запроса
	vars := mux.Vars(r)
	itemID, ok := vars["item_id"]
	if !ok {
		http.Error(w, "item_id is missing in parameters", http.StatusBadRequest)
		return
	}

	// Ваш код для получения данных из базы данных по itemID
	// Например:
	var item item.Item
	result := db.First(&item, "item_id = ?", itemID)
	if result.Error != nil {
		http.Error(w, "Item not found", http.StatusNotFound)
		return
	}

	// Преобразование модели данных в формат JSON
	jsonData, err := json.Marshal(item)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(jsonData)
}

func ItemsPost(w http.ResponseWriter, r *http.Request) {
	var newItem item.Item
	decoder := json.NewDecoder(r.Body)
	err := decoder.Decode(&newItem)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Создание новой записи в базе данных
	db.Create(&newItem)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(newItem)
}
